#!/usr/bin/env python3

import argparse
import re
from lxml import etree
from io import StringIO
import os

repalcements = [
    lambda s: s.replace(":NUMERIC#", ",jdbcType=NUMERIC#"),
    lambda s: s.replace(":TIMESTAMP#", ",jdbcType=TIMESTAMP#"),
    lambda s: s.replace(":VARCHAR#", ",jdbcType=VARCHAR#"),
    lambda s: s.replace(":BLOB#", ",jdbcType=BLOB#"),
    lambda s: s.replace(":???#", ",jdbcType=???#"),
    lambda s: re.sub("\\$([a-zA-Z0-9\\.\\[\\]_]+)\\$", "${\\1}", s),
    lambda s: re.sub("#([a-zA-Z0-9,_\\.=\\[\\]]{2,})#", "#{\\1}", s),
    lambda s: re.sub("[a-zA-Z\\.]{2,}\\[\\]", "item", s),
]

# <project name="migrate to mybatis3" basedir="." default="migrateToMyBatis3">
# 	<target name="migrateToMyBatis3">
# 		<!-- delete possible results from previous run -->
# 		<delete>
# 		    <fileset dir="destination" includes="*.xml"/>
# 		  </delete>
# 		<!-- xslt convert sqlMaps 2 to mybatis 3 -->
# 		<xslt basedir="source" style="migrate.xslt" includes="*.xml" destdir="destination" extension=".xml"/>
# 		-->
# 		<xmlvalidate failonerror="yes" lenient="false" warn="yes">
# 				<attribute name="http://apache.org/xml/features/validation/schema"  value="false" />
# 				<attribute name="http://xml.org/sax/features/namespaces" value="false" />
# 			<fileset dir="destination" includes="*.xml" />
# 			<dtd publicId="-//mybatis.org//DTD SQL Map Config 3.0//EN" location="mybatis-3-config.dtd" />
# 			<dtd publicId="-//mybatis.org//DTD Mapper 3.0//EN" location="mybatis-3-mapper.dtd" />
# 		</xmlvalidate>
# 
# 	</target>
# </project>

this_dir = os.path.dirname(os.path.abspath(__file__))


def load_xslt():
    return etree.XSLT(etree.parse(os.path.join(this_dir, 'migrate.xslt')))


def main():
    parser = argparse.ArgumentParser("migrate-ibatis")
    parser.add_argument('files', nargs='+', help='files to update')
    args = parser.parse_args()

    transform = load_xslt()

    for f in args.files:
        print(f'processing {f}')
        with open(f, 'r') as inp:
            dom = etree.parse(inp)

        new_dom = transform(dom)

        result = etree.tostring(new_dom, pretty_print=True)

        if result is None:
            print(f'failed {f}')
            continue

        with open(f, 'w') as out:
            for line in result.decode().split('\n'):
                for r in repalcements:
                    line = r(line)
                out.write(line + '\n')


if __name__ == '__main__':
    main()
